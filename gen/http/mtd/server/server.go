// Code generated by goa v3.0.2, DO NOT EDIT.
//
// mtd HTTP server
//
// Command:
// $ goa gen github.com/awltux/hmrc_oauth/design

package server

import (
	"context"
	"net/http"

	mtd "github.com/awltux/hmrc_oauth/gen/mtd"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the mtd service endpoint HTTP handlers.
type Server struct {
	Mounts       []*MountPoint
	Register     http.Handler
	Retrieve     http.Handler
	HmrcCallback http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the mtd service endpoints.
func New(
	e *mtd.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Register", "POST", "/v1/mtd/{state}"},
			{"Retrieve", "GET", "/v1/mtd/{state}"},
			{"HmrcCallback", "POST", "/v1/mtd"},
		},
		Register:     NewRegisterHandler(e.Register, mux, dec, enc, eh),
		Retrieve:     NewRetrieveHandler(e.Retrieve, mux, dec, enc, eh),
		HmrcCallback: NewHmrcCallbackHandler(e.HmrcCallback, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "mtd" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Register = m(s.Register)
	s.Retrieve = m(s.Retrieve)
	s.HmrcCallback = m(s.HmrcCallback)
}

// Mount configures the mux to serve the mtd endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountRegisterHandler(mux, h.Register)
	MountRetrieveHandler(mux, h.Retrieve)
	MountHmrcCallbackHandler(mux, h.HmrcCallback)
}

// MountRegisterHandler configures the mux to serve the "mtd" service
// "register" endpoint.
func MountRegisterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/mtd/{state}", f)
}

// NewRegisterHandler creates a HTTP handler which loads the HTTP request and
// calls the "mtd" service "register" endpoint.
func NewRegisterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeRegisterRequest(mux, dec)
		encodeResponse = EncodeRegisterResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "register")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mtd")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountRetrieveHandler configures the mux to serve the "mtd" service
// "retrieve" endpoint.
func MountRetrieveHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/mtd/{state}", f)
}

// NewRetrieveHandler creates a HTTP handler which loads the HTTP request and
// calls the "mtd" service "retrieve" endpoint.
func NewRetrieveHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeRetrieveRequest(mux, dec)
		encodeResponse = EncodeRetrieveResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "retrieve")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mtd")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountHmrcCallbackHandler configures the mux to serve the "mtd" service
// "hmrc_callback" endpoint.
func MountHmrcCallbackHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/mtd", f)
}

// NewHmrcCallbackHandler creates a HTTP handler which loads the HTTP request
// and calls the "mtd" service "hmrc_callback" endpoint.
func NewHmrcCallbackHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeHmrcCallbackRequest(mux, dec)
		encodeResponse = EncodeHmrcCallbackResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "hmrc_callback")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mtd")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
