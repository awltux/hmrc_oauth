// Code generated by goa v3.0.2, DO NOT EDIT.
//
// mtd HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/awltux/hmrc_oauth/design

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// EncodeRegisterResponse returns an encoder for responses returned by the mtd
// register endpoint.
func EncodeRegisterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeRegisterRequest returns a decoder for requests sent to the mtd
// register endpoint.
func DecodeRegisterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			state string

			params = mux.Vars(r)
		)
		state = params["state"]
		payload := NewRegisterStatePayload(state)

		return payload, nil
	}
}

// EncodeRetrieveResponse returns an encoder for responses returned by the mtd
// retrieve endpoint.
func EncodeRetrieveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRetrieveRequest returns a decoder for requests sent to the mtd
// retrieve endpoint.
func DecodeRetrieveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			state string

			params = mux.Vars(r)
		)
		state = params["state"]
		payload := NewRetrieveStatePayload(state)

		return payload, nil
	}
}

// EncodeHmrcCallbackResponse returns an encoder for responses returned by the
// mtd hmrc_callback endpoint.
func EncodeHmrcCallbackResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeHmrcCallbackRequest returns a decoder for requests sent to the mtd
// hmrc_callback endpoint.
func DecodeHmrcCallbackRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			code             *string
			state            *string
			error            *string
			errorDescription *string
			errorCode        *string
		)
		codeRaw := r.URL.Query().Get("code")
		if codeRaw != "" {
			code = &codeRaw
		}
		stateRaw := r.URL.Query().Get("state")
		if stateRaw != "" {
			state = &stateRaw
		}
		errorRaw := r.URL.Query().Get("error")
		if errorRaw != "" {
			error = &errorRaw
		}
		errorDescriptionRaw := r.URL.Query().Get("error_description")
		if errorDescriptionRaw != "" {
			errorDescription = &errorDescriptionRaw
		}
		errorCodeRaw := r.URL.Query().Get("error_code")
		if errorCodeRaw != "" {
			errorCode = &errorCodeRaw
		}
		payload := NewHmrcCallbackCodePayload(code, state, error, errorDescription, errorCode)

		return payload, nil
	}
}
