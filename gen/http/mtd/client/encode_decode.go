// Code generated by goa v3.0.2, DO NOT EDIT.
//
// mtd HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/awltux/hmrc_oauth/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	mtd "github.com/awltux/hmrc_oauth/gen/mtd"
	goahttp "goa.design/goa/v3/http"
)

// BuildRegisterRequest instantiates a HTTP request object with method and path
// set to call the "mtd" service "register" endpoint
func (c *Client) BuildRegisterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		state string
	)
	{
		p, ok := v.(*mtd.StatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mtd", "register", "*mtd.StatePayload", v)
		}
		if p.State != nil {
			state = *p.State
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterMtdPath(state)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mtd", "register", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRegisterResponse returns a decoder for responses returned by the mtd
// register endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRegisterResponse may return the following errors:
//	- "key_length_error" (type *goa.ServiceError): http.StatusPreconditionFailed
//	- "key_already_exists" (type *goa.ServiceError): http.StatusConflict
//	- "key_ip_mismatch" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeRegisterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusPreconditionFailed:
			var (
				body RegisterKeyLengthErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "register", err)
			}
			err = ValidateRegisterKeyLengthErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "register", err)
			}
			return nil, NewRegisterKeyLengthError(&body)
		case http.StatusConflict:
			var (
				body RegisterKeyAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "register", err)
			}
			err = ValidateRegisterKeyAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "register", err)
			}
			return nil, NewRegisterKeyAlreadyExists(&body)
		case http.StatusUnauthorized:
			var (
				body RegisterKeyIPMismatchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "register", err)
			}
			err = ValidateRegisterKeyIPMismatchResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "register", err)
			}
			return nil, NewRegisterKeyIPMismatch(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mtd", "register", resp.StatusCode, string(body))
		}
	}
}

// BuildRetrieveRequest instantiates a HTTP request object with method and path
// set to call the "mtd" service "retrieve" endpoint
func (c *Client) BuildRetrieveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		state string
	)
	{
		p, ok := v.(*mtd.StatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mtd", "retrieve", "*mtd.StatePayload", v)
		}
		if p.State != nil {
			state = *p.State
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetrieveMtdPath(state)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mtd", "retrieve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRetrieveResponse returns a decoder for responses returned by the mtd
// retrieve endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRetrieveResponse may return the following errors:
//	- "invalid_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "key_has_no_token" (type *goa.ServiceError): http.StatusPartialContent
//	- "key_ip_mismatch" (type *goa.ServiceError): http.StatusUnauthorized
//	- "matching_key_not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeRetrieveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "retrieve", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body RetrieveInvalidRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "retrieve", err)
			}
			err = ValidateRetrieveInvalidRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "retrieve", err)
			}
			return nil, NewRetrieveInvalidRequest(&body)
		case http.StatusPartialContent:
			var (
				body RetrieveKeyHasNoTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "retrieve", err)
			}
			err = ValidateRetrieveKeyHasNoTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "retrieve", err)
			}
			return nil, NewRetrieveKeyHasNoToken(&body)
		case http.StatusUnauthorized:
			var (
				body RetrieveKeyIPMismatchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "retrieve", err)
			}
			err = ValidateRetrieveKeyIPMismatchResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "retrieve", err)
			}
			return nil, NewRetrieveKeyIPMismatch(&body)
		case http.StatusNotFound:
			var (
				body RetrieveMatchingKeyNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "retrieve", err)
			}
			err = ValidateRetrieveMatchingKeyNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "retrieve", err)
			}
			return nil, NewRetrieveMatchingKeyNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mtd", "retrieve", resp.StatusCode, string(body))
		}
	}
}

// BuildHmrcCallbackRequest instantiates a HTTP request object with method and
// path set to call the "mtd" service "hmrc_callback" endpoint
func (c *Client) BuildHmrcCallbackRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HmrcCallbackMtdPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mtd", "hmrc_callback", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeHmrcCallbackRequest returns an encoder for requests sent to the mtd
// hmrc_callback server.
func EncodeHmrcCallbackRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*mtd.CodePayload)
		if !ok {
			return goahttp.ErrInvalidType("mtd", "hmrc_callback", "*mtd.CodePayload", v)
		}
		values := req.URL.Query()
		if p.Code != nil {
			values.Add("code", *p.Code)
		}
		if p.State != nil {
			values.Add("state", *p.State)
		}
		if p.Error != nil {
			values.Add("error", *p.Error)
		}
		if p.ErrorDescription != nil {
			values.Add("error_description", *p.ErrorDescription)
		}
		if p.ErrorCode != nil {
			values.Add("error_code", *p.ErrorCode)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeHmrcCallbackResponse returns a decoder for responses returned by the
// mtd hmrc_callback endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeHmrcCallbackResponse may return the following errors:
//	- "matching_key_not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "invalid_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "key_length_error" (type *goa.ServiceError): http.StatusPreconditionFailed
//	- error: internal error
func DecodeHmrcCallbackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body HmrcCallbackMatchingKeyNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "hmrc_callback", err)
			}
			err = ValidateHmrcCallbackMatchingKeyNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "hmrc_callback", err)
			}
			return nil, NewHmrcCallbackMatchingKeyNotFound(&body)
		case http.StatusBadRequest:
			var (
				body HmrcCallbackInvalidRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "hmrc_callback", err)
			}
			err = ValidateHmrcCallbackInvalidRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "hmrc_callback", err)
			}
			return nil, NewHmrcCallbackInvalidRequest(&body)
		case http.StatusPreconditionFailed:
			var (
				body HmrcCallbackKeyLengthErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mtd", "hmrc_callback", err)
			}
			err = ValidateHmrcCallbackKeyLengthErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mtd", "hmrc_callback", err)
			}
			return nil, NewHmrcCallbackKeyLengthError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mtd", "hmrc_callback", resp.StatusCode, string(body))
		}
	}
}
