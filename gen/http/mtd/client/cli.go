// Code generated by goa v3.0.2, DO NOT EDIT.
//
// mtd HTTP client CLI support package
//
// Command:
// $ goa gen github.com/awltux/hmrc_oauth/design

package client

import (
	mtd "github.com/awltux/hmrc_oauth/gen/mtd"
)

// BuildRegisterPayload builds the payload for the mtd register endpoint from
// CLI flags.
func BuildRegisterPayload(mtdRegisterState string) (*mtd.StatePayload, error) {
	var state string
	{
		state = mtdRegisterState
	}
	payload := &mtd.StatePayload{
		State: &state,
	}
	return payload, nil
}

// BuildRetrievePayload builds the payload for the mtd retrieve endpoint from
// CLI flags.
func BuildRetrievePayload(mtdRetrieveState string) (*mtd.StatePayload, error) {
	var state string
	{
		state = mtdRetrieveState
	}
	payload := &mtd.StatePayload{
		State: &state,
	}
	return payload, nil
}

// BuildHmrcCallbackPayload builds the payload for the mtd hmrc_callback
// endpoint from CLI flags.
func BuildHmrcCallbackPayload(mtdHmrcCallbackCode string, mtdHmrcCallbackState string, mtdHmrcCallbackError string, mtdHmrcCallbackErrorDescription string, mtdHmrcCallbackErrorCode string) (*mtd.CodePayload, error) {
	var code *string
	{
		if mtdHmrcCallbackCode != "" {
			code = &mtdHmrcCallbackCode
		}
	}
	var state *string
	{
		if mtdHmrcCallbackState != "" {
			state = &mtdHmrcCallbackState
		}
	}
	var error *string
	{
		if mtdHmrcCallbackError != "" {
			error = &mtdHmrcCallbackError
		}
	}
	var errorDescription *string
	{
		if mtdHmrcCallbackErrorDescription != "" {
			errorDescription = &mtdHmrcCallbackErrorDescription
		}
	}
	var errorCode *string
	{
		if mtdHmrcCallbackErrorCode != "" {
			errorCode = &mtdHmrcCallbackErrorCode
		}
	}
	payload := &mtd.CodePayload{
		Code:             code,
		State:            state,
		Error:            error,
		ErrorDescription: errorDescription,
		ErrorCode:        errorCode,
	}
	return payload, nil
}
